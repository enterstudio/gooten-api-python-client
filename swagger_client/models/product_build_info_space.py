# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ProductBuildInfoSpace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProductBuildInfoSpace - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'description': 'str',
            'index': 'int',
            'default_rotation': 'int',
            'layers': 'list[ProductBuildInfo]'
        }

        self.attribute_map = {
            'id': 'Id',
            'description': 'Description',
            'index': 'Index',
            'default_rotation': 'DefaultRotation',
            'layers': 'Layers'
        }

        self._id = None
        self._description = None
        self._index = None
        self._default_rotation = None
        self._layers = None

    @property
    def id(self):
        """
        Gets the id of this ProductBuildInfoSpace.


        :return: The id of this ProductBuildInfoSpace.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProductBuildInfoSpace.


        :param id: The id of this ProductBuildInfoSpace.
        :type: str
        """
        self._id = id

    @property
    def description(self):
        """
        Gets the description of this ProductBuildInfoSpace.


        :return: The description of this ProductBuildInfoSpace.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProductBuildInfoSpace.


        :param description: The description of this ProductBuildInfoSpace.
        :type: str
        """
        self._description = description

    @property
    def index(self):
        """
        Gets the index of this ProductBuildInfoSpace.


        :return: The index of this ProductBuildInfoSpace.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """
        Sets the index of this ProductBuildInfoSpace.


        :param index: The index of this ProductBuildInfoSpace.
        :type: int
        """
        self._index = index

    @property
    def default_rotation(self):
        """
        Gets the default_rotation of this ProductBuildInfoSpace.


        :return: The default_rotation of this ProductBuildInfoSpace.
        :rtype: int
        """
        return self._default_rotation

    @default_rotation.setter
    def default_rotation(self, default_rotation):
        """
        Sets the default_rotation of this ProductBuildInfoSpace.


        :param default_rotation: The default_rotation of this ProductBuildInfoSpace.
        :type: int
        """
        self._default_rotation = default_rotation

    @property
    def layers(self):
        """
        Gets the layers of this ProductBuildInfoSpace.


        :return: The layers of this ProductBuildInfoSpace.
        :rtype: list[ProductBuildInfo]
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """
        Sets the layers of this ProductBuildInfoSpace.


        :param layers: The layers of this ProductBuildInfoSpace.
        :type: list[ProductBuildInfo]
        """
        self._layers = layers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

