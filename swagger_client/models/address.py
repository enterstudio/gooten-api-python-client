# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Address(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Address - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'city': 'str',
            'country_code': 'str',
            'postal_code': 'str',
            'state_or_province_code': 'str',
            'street_lines': 'list[str]'
        }

        self.attribute_map = {
            'city': 'City',
            'country_code': 'CountryCode',
            'postal_code': 'PostalCode',
            'state_or_province_code': 'StateOrProvinceCode',
            'street_lines': 'StreetLines'
        }

        self._city = None
        self._country_code = None
        self._postal_code = None
        self._state_or_province_code = None
        self._street_lines = None

    @property
    def city(self):
        """
        Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Address.


        :param city: The city of this Address.
        :type: str
        """
        self._city = city

    @property
    def country_code(self):
        """
        Gets the country_code of this Address.


        :return: The country_code of this Address.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this Address.


        :param country_code: The country_code of this Address.
        :type: str
        """
        self._country_code = country_code

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Address.


        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Address.


        :param postal_code: The postal_code of this Address.
        :type: str
        """
        self._postal_code = postal_code

    @property
    def state_or_province_code(self):
        """
        Gets the state_or_province_code of this Address.


        :return: The state_or_province_code of this Address.
        :rtype: str
        """
        return self._state_or_province_code

    @state_or_province_code.setter
    def state_or_province_code(self, state_or_province_code):
        """
        Sets the state_or_province_code of this Address.


        :param state_or_province_code: The state_or_province_code of this Address.
        :type: str
        """
        self._state_or_province_code = state_or_province_code

    @property
    def street_lines(self):
        """
        Gets the street_lines of this Address.


        :return: The street_lines of this Address.
        :rtype: list[str]
        """
        return self._street_lines

    @street_lines.setter
    def street_lines(self, street_lines):
        """
        Sets the street_lines of this Address.


        :param street_lines: The street_lines of this Address.
        :type: list[str]
        """
        self._street_lines = street_lines

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

