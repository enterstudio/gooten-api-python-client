# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PreconfiguredItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PreconfiguredItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'product_id': 'int',
            'product_variant_sku': 'str',
            'preconfigurations': 'list[Preconfiguration]'
        }

        self.attribute_map = {
            'product_id': 'ProductId',
            'product_variant_sku': 'ProductVariantSku',
            'preconfigurations': 'Preconfigurations'
        }

        self._product_id = None
        self._product_variant_sku = None
        self._preconfigurations = None

    @property
    def product_id(self):
        """
        Gets the product_id of this PreconfiguredItem.
        The ID of the product this item references.

        :return: The product_id of this PreconfiguredItem.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this PreconfiguredItem.
        The ID of the product this item references.

        :param product_id: The product_id of this PreconfiguredItem.
        :type: int
        """
        self._product_id = product_id

    @property
    def product_variant_sku(self):
        """
        Gets the product_variant_sku of this PreconfiguredItem.
        The sku of the product variant this item references.

        :return: The product_variant_sku of this PreconfiguredItem.
        :rtype: str
        """
        return self._product_variant_sku

    @product_variant_sku.setter
    def product_variant_sku(self, product_variant_sku):
        """
        Sets the product_variant_sku of this PreconfiguredItem.
        The sku of the product variant this item references.

        :param product_variant_sku: The product_variant_sku of this PreconfiguredItem.
        :type: str
        """
        self._product_variant_sku = product_variant_sku

    @property
    def preconfigurations(self):
        """
        Gets the preconfigurations of this PreconfiguredItem.


        :return: The preconfigurations of this PreconfiguredItem.
        :rtype: list[Preconfiguration]
        """
        return self._preconfigurations

    @preconfigurations.setter
    def preconfigurations(self, preconfigurations):
        """
        Sets the preconfigurations of this PreconfiguredItem.


        :param preconfigurations: The preconfigurations of this PreconfiguredItem.
        :type: list[Preconfiguration]
        """
        self._preconfigurations = preconfigurations

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

