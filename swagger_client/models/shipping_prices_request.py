# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ShippingPricesRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ShippingPricesRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ship_to_postal_code': 'str',
            'ship_to_country': 'str',
            'ship_to_state': 'str',
            'currency_code': 'str',
            'language_code': 'str',
            'items': 'list[SkuQuantityPair]'
        }

        self.attribute_map = {
            'ship_to_postal_code': 'ShipToPostalCode',
            'ship_to_country': 'ShipToCountry',
            'ship_to_state': 'ShipToState',
            'currency_code': 'CurrencyCode',
            'language_code': 'LanguageCode',
            'items': 'Items'
        }

        self._ship_to_postal_code = None
        self._ship_to_country = None
        self._ship_to_state = None
        self._currency_code = None
        self._language_code = None
        self._items = None

    @property
    def ship_to_postal_code(self):
        """
        Gets the ship_to_postal_code of this ShippingPricesRequest.


        :return: The ship_to_postal_code of this ShippingPricesRequest.
        :rtype: str
        """
        return self._ship_to_postal_code

    @ship_to_postal_code.setter
    def ship_to_postal_code(self, ship_to_postal_code):
        """
        Sets the ship_to_postal_code of this ShippingPricesRequest.


        :param ship_to_postal_code: The ship_to_postal_code of this ShippingPricesRequest.
        :type: str
        """
        self._ship_to_postal_code = ship_to_postal_code

    @property
    def ship_to_country(self):
        """
        Gets the ship_to_country of this ShippingPricesRequest.


        :return: The ship_to_country of this ShippingPricesRequest.
        :rtype: str
        """
        return self._ship_to_country

    @ship_to_country.setter
    def ship_to_country(self, ship_to_country):
        """
        Sets the ship_to_country of this ShippingPricesRequest.


        :param ship_to_country: The ship_to_country of this ShippingPricesRequest.
        :type: str
        """
        self._ship_to_country = ship_to_country

    @property
    def ship_to_state(self):
        """
        Gets the ship_to_state of this ShippingPricesRequest.


        :return: The ship_to_state of this ShippingPricesRequest.
        :rtype: str
        """
        return self._ship_to_state

    @ship_to_state.setter
    def ship_to_state(self, ship_to_state):
        """
        Sets the ship_to_state of this ShippingPricesRequest.


        :param ship_to_state: The ship_to_state of this ShippingPricesRequest.
        :type: str
        """
        self._ship_to_state = ship_to_state

    @property
    def currency_code(self):
        """
        Gets the currency_code of this ShippingPricesRequest.


        :return: The currency_code of this ShippingPricesRequest.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """
        Sets the currency_code of this ShippingPricesRequest.


        :param currency_code: The currency_code of this ShippingPricesRequest.
        :type: str
        """
        self._currency_code = currency_code

    @property
    def language_code(self):
        """
        Gets the language_code of this ShippingPricesRequest.


        :return: The language_code of this ShippingPricesRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """
        Sets the language_code of this ShippingPricesRequest.


        :param language_code: The language_code of this ShippingPricesRequest.
        :type: str
        """
        self._language_code = language_code

    @property
    def items(self):
        """
        Gets the items of this ShippingPricesRequest.


        :return: The items of this ShippingPricesRequest.
        :rtype: list[SkuQuantityPair]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this ShippingPricesRequest.


        :param items: The items of this ShippingPricesRequest.
        :type: list[SkuQuantityPair]
        """
        self._items = items

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

