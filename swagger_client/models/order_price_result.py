# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class OrderPriceResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        OrderPriceResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'items': 'PriceInfo',
            'shipping': 'PriceInfo',
            'tax': 'PriceInfo',
            'coupon_code': 'PriceInfo',
            'coupon_type': 'str',
            'coupon_used': 'str',
            'had_coupon_apply': 'bool',
            'dollars_off': 'int',
            'percent_off': 'int',
            'had_error': 'bool'
        }

        self.attribute_map = {
            'items': 'Items',
            'shipping': 'Shipping',
            'tax': 'Tax',
            'coupon_code': 'CouponCode',
            'coupon_type': 'CouponType',
            'coupon_used': 'CouponUsed',
            'had_coupon_apply': 'HadCouponApply',
            'dollars_off': 'DollarsOff',
            'percent_off': 'PercentOff',
            'had_error': 'HadError'
        }

        self._items = None
        self._shipping = None
        self._tax = None
        self._coupon_code = None
        self._coupon_type = None
        self._coupon_used = None
        self._had_coupon_apply = None
        self._dollars_off = None
        self._percent_off = None
        self._had_error = None

    @property
    def items(self):
        """
        Gets the items of this OrderPriceResult.


        :return: The items of this OrderPriceResult.
        :rtype: PriceInfo
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this OrderPriceResult.


        :param items: The items of this OrderPriceResult.
        :type: PriceInfo
        """
        self._items = items

    @property
    def shipping(self):
        """
        Gets the shipping of this OrderPriceResult.


        :return: The shipping of this OrderPriceResult.
        :rtype: PriceInfo
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """
        Sets the shipping of this OrderPriceResult.


        :param shipping: The shipping of this OrderPriceResult.
        :type: PriceInfo
        """
        self._shipping = shipping

    @property
    def tax(self):
        """
        Gets the tax of this OrderPriceResult.


        :return: The tax of this OrderPriceResult.
        :rtype: PriceInfo
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this OrderPriceResult.


        :param tax: The tax of this OrderPriceResult.
        :type: PriceInfo
        """
        self._tax = tax

    @property
    def coupon_code(self):
        """
        Gets the coupon_code of this OrderPriceResult.


        :return: The coupon_code of this OrderPriceResult.
        :rtype: PriceInfo
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """
        Sets the coupon_code of this OrderPriceResult.


        :param coupon_code: The coupon_code of this OrderPriceResult.
        :type: PriceInfo
        """
        self._coupon_code = coupon_code

    @property
    def coupon_type(self):
        """
        Gets the coupon_type of this OrderPriceResult.


        :return: The coupon_type of this OrderPriceResult.
        :rtype: str
        """
        return self._coupon_type

    @coupon_type.setter
    def coupon_type(self, coupon_type):
        """
        Sets the coupon_type of this OrderPriceResult.


        :param coupon_type: The coupon_type of this OrderPriceResult.
        :type: str
        """
        self._coupon_type = coupon_type

    @property
    def coupon_used(self):
        """
        Gets the coupon_used of this OrderPriceResult.


        :return: The coupon_used of this OrderPriceResult.
        :rtype: str
        """
        return self._coupon_used

    @coupon_used.setter
    def coupon_used(self, coupon_used):
        """
        Sets the coupon_used of this OrderPriceResult.


        :param coupon_used: The coupon_used of this OrderPriceResult.
        :type: str
        """
        self._coupon_used = coupon_used

    @property
    def had_coupon_apply(self):
        """
        Gets the had_coupon_apply of this OrderPriceResult.


        :return: The had_coupon_apply of this OrderPriceResult.
        :rtype: bool
        """
        return self._had_coupon_apply

    @had_coupon_apply.setter
    def had_coupon_apply(self, had_coupon_apply):
        """
        Sets the had_coupon_apply of this OrderPriceResult.


        :param had_coupon_apply: The had_coupon_apply of this OrderPriceResult.
        :type: bool
        """
        self._had_coupon_apply = had_coupon_apply

    @property
    def dollars_off(self):
        """
        Gets the dollars_off of this OrderPriceResult.


        :return: The dollars_off of this OrderPriceResult.
        :rtype: int
        """
        return self._dollars_off

    @dollars_off.setter
    def dollars_off(self, dollars_off):
        """
        Sets the dollars_off of this OrderPriceResult.


        :param dollars_off: The dollars_off of this OrderPriceResult.
        :type: int
        """
        self._dollars_off = dollars_off

    @property
    def percent_off(self):
        """
        Gets the percent_off of this OrderPriceResult.


        :return: The percent_off of this OrderPriceResult.
        :rtype: int
        """
        return self._percent_off

    @percent_off.setter
    def percent_off(self, percent_off):
        """
        Sets the percent_off of this OrderPriceResult.


        :param percent_off: The percent_off of this OrderPriceResult.
        :type: int
        """
        self._percent_off = percent_off

    @property
    def had_error(self):
        """
        Gets the had_error of this OrderPriceResult.


        :return: The had_error of this OrderPriceResult.
        :rtype: bool
        """
        return self._had_error

    @had_error.setter
    def had_error(self, had_error):
        """
        Sets the had_error of this OrderPriceResult.


        :param had_error: The had_error of this OrderPriceResult.
        :type: bool
        """
        self._had_error = had_error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

