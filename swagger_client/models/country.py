# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Country(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Country - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'code': 'str',
            'is_supported': 'bool',
            'measurement_code': 'str',
            'flag_url': 'str',
            'default_currency': 'Currency'
        }

        self.attribute_map = {
            'name': 'Name',
            'code': 'Code',
            'is_supported': 'IsSupported',
            'measurement_code': 'MeasurementCode',
            'flag_url': 'FlagUrl',
            'default_currency': 'DefaultCurrency'
        }

        self._name = None
        self._code = None
        self._is_supported = None
        self._measurement_code = None
        self._flag_url = None
        self._default_currency = None

    @property
    def name(self):
        """
        Gets the name of this Country.


        :return: The name of this Country.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Country.


        :param name: The name of this Country.
        :type: str
        """
        self._name = name

    @property
    def code(self):
        """
        Gets the code of this Country.


        :return: The code of this Country.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Country.


        :param code: The code of this Country.
        :type: str
        """
        self._code = code

    @property
    def is_supported(self):
        """
        Gets the is_supported of this Country.


        :return: The is_supported of this Country.
        :rtype: bool
        """
        return self._is_supported

    @is_supported.setter
    def is_supported(self, is_supported):
        """
        Sets the is_supported of this Country.


        :param is_supported: The is_supported of this Country.
        :type: bool
        """
        self._is_supported = is_supported

    @property
    def measurement_code(self):
        """
        Gets the measurement_code of this Country.


        :return: The measurement_code of this Country.
        :rtype: str
        """
        return self._measurement_code

    @measurement_code.setter
    def measurement_code(self, measurement_code):
        """
        Sets the measurement_code of this Country.


        :param measurement_code: The measurement_code of this Country.
        :type: str
        """
        self._measurement_code = measurement_code

    @property
    def flag_url(self):
        """
        Gets the flag_url of this Country.


        :return: The flag_url of this Country.
        :rtype: str
        """
        return self._flag_url

    @flag_url.setter
    def flag_url(self, flag_url):
        """
        Sets the flag_url of this Country.


        :param flag_url: The flag_url of this Country.
        :type: str
        """
        self._flag_url = flag_url

    @property
    def default_currency(self):
        """
        Gets the default_currency of this Country.


        :return: The default_currency of this Country.
        :rtype: Currency
        """
        return self._default_currency

    @default_currency.setter
    def default_currency(self, default_currency):
        """
        Sets the default_currency of this Country.


        :param default_currency: The default_currency of this Country.
        :type: Currency
        """
        self._default_currency = default_currency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

