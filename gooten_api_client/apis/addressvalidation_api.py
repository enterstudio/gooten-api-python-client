# coding: utf-8

"""
AddressvalidationApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient



class AddressvalidationApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client


    def addressvalidation(self, **kwargs):
        """
        Validates an address and returns a suggested address (if available) and a validation score.
        Validates an address and returns a suggested address (if available) and a validation score.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>

        >>> thread = api.addressvalidation(callback=callback_function)



        :param callback function: The callback function
            for asynchronous request. (optional)

        :param str line1: Address line1.

        :param str line2: Address line2.

        :param str city: Address city.

        :param str state: Address state.

        :param str postal_code: Address postal code/zip.

        :param str country_code: Address country code.

        :return: Result
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['line1', 'line2', 'city', 'state', 'postal_code', 'country_code']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method addressvalidation" % key
                )
            params[key] = val
        del params['kwargs']















        resource_path = '/addressvalidation/'.replace('{format}', 'json')
        path_params = {}


        query_params = {}

        if 'line1' in params:
            query_params['line1'] = params['line1']

        if 'line2' in params:
            query_params['line2'] = params['line2']

        if 'city' in params:
            query_params['city'] = params['city']

        if 'state' in params:
            query_params['state'] = params['state']

        if 'postal_code' in params:
            query_params['postalCode'] = params['postal_code']

        if 'country_code' in params:
            query_params['countryCode'] = params['country_code']


        header_params = {}


        form_params = []
        local_var_files = {}


        body_params = None


        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Result',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response


