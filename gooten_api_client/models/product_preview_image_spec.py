# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class ProductPreviewImageSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProductPreviewImageSpec - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'url': 'str',
            'x1': 'int',
            'x2': 'int',
            'y1': 'int',
            'y2': 'int'
        }

        self.attribute_map = {
            'url': 'Url',
            'x1': 'X1',
            'x2': 'X2',
            'y1': 'Y1',
            'y2': 'Y2'
        }


        self._url = None

        self._x1 = None

        self._x2 = None

        self._y1 = None

        self._y2 = None



    @property
    def url(self):
        """
        Gets the url of this ProductPreviewImageSpec.


        :return: The url of this ProductPreviewImageSpec.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this ProductPreviewImageSpec.


        :param url: The url of this ProductPreviewImageSpec.
        :type: str
        """
        self._url = url


    @property
    def x1(self):
        """
        Gets the x1 of this ProductPreviewImageSpec.


        :return: The x1 of this ProductPreviewImageSpec.
        :rtype: int
        """
        return self._x1

    @x1.setter
    def x1(self, x1):
        """
        Sets the x1 of this ProductPreviewImageSpec.


        :param x1: The x1 of this ProductPreviewImageSpec.
        :type: int
        """
        self._x1 = x1


    @property
    def x2(self):
        """
        Gets the x2 of this ProductPreviewImageSpec.


        :return: The x2 of this ProductPreviewImageSpec.
        :rtype: int
        """
        return self._x2

    @x2.setter
    def x2(self, x2):
        """
        Sets the x2 of this ProductPreviewImageSpec.


        :param x2: The x2 of this ProductPreviewImageSpec.
        :type: int
        """
        self._x2 = x2


    @property
    def y1(self):
        """
        Gets the y1 of this ProductPreviewImageSpec.


        :return: The y1 of this ProductPreviewImageSpec.
        :rtype: int
        """
        return self._y1

    @y1.setter
    def y1(self, y1):
        """
        Sets the y1 of this ProductPreviewImageSpec.


        :param y1: The y1 of this ProductPreviewImageSpec.
        :type: int
        """
        self._y1 = y1


    @property
    def y2(self):
        """
        Gets the y2 of this ProductPreviewImageSpec.


        :return: The y2 of this ProductPreviewImageSpec.
        :rtype: int
        """
        return self._y2

    @y2.setter
    def y2(self, y2):
        """
        Sets the y2 of this ProductPreviewImageSpec.


        :param y2: The y2 of this ProductPreviewImageSpec.
        :type: int
        """
        self._y2 = y2


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



