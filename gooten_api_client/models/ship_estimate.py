# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class ShipEstimate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ShipEstimate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'min_price': 'ShipPrice',
            'max_price': 'ShipPrice',
            'vendor_country_code': 'str',
            'can_ship_expedited': 'bool',
            'est_ship_days': 'int'
        }

        self.attribute_map = {
            'min_price': 'MinPrice',
            'max_price': 'MaxPrice',
            'vendor_country_code': 'VendorCountryCode',
            'can_ship_expedited': 'CanShipExpedited',
            'est_ship_days': 'EstShipDays'
        }


        self._min_price = None

        self._max_price = None

        self._vendor_country_code = None

        self._can_ship_expedited = None

        self._est_ship_days = None



    @property
    def min_price(self):
        """
        Gets the min_price of this ShipEstimate.


        :return: The min_price of this ShipEstimate.
        :rtype: ShipPrice
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price):
        """
        Sets the min_price of this ShipEstimate.


        :param min_price: The min_price of this ShipEstimate.
        :type: ShipPrice
        """
        self._min_price = min_price


    @property
    def max_price(self):
        """
        Gets the max_price of this ShipEstimate.


        :return: The max_price of this ShipEstimate.
        :rtype: ShipPrice
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """
        Sets the max_price of this ShipEstimate.


        :param max_price: The max_price of this ShipEstimate.
        :type: ShipPrice
        """
        self._max_price = max_price


    @property
    def vendor_country_code(self):
        """
        Gets the vendor_country_code of this ShipEstimate.


        :return: The vendor_country_code of this ShipEstimate.
        :rtype: str
        """
        return self._vendor_country_code

    @vendor_country_code.setter
    def vendor_country_code(self, vendor_country_code):
        """
        Sets the vendor_country_code of this ShipEstimate.


        :param vendor_country_code: The vendor_country_code of this ShipEstimate.
        :type: str
        """
        self._vendor_country_code = vendor_country_code


    @property
    def can_ship_expedited(self):
        """
        Gets the can_ship_expedited of this ShipEstimate.


        :return: The can_ship_expedited of this ShipEstimate.
        :rtype: bool
        """
        return self._can_ship_expedited

    @can_ship_expedited.setter
    def can_ship_expedited(self, can_ship_expedited):
        """
        Sets the can_ship_expedited of this ShipEstimate.


        :param can_ship_expedited: The can_ship_expedited of this ShipEstimate.
        :type: bool
        """
        self._can_ship_expedited = can_ship_expedited


    @property
    def est_ship_days(self):
        """
        Gets the est_ship_days of this ShipEstimate.


        :return: The est_ship_days of this ShipEstimate.
        :rtype: int
        """
        return self._est_ship_days

    @est_ship_days.setter
    def est_ship_days(self, est_ship_days):
        """
        Sets the est_ship_days of this ShipEstimate.


        :param est_ship_days: The est_ship_days of this ShipEstimate.
        :type: int
        """
        self._est_ship_days = est_ship_days


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



