# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PreconfiguredProduct(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PreconfiguredProduct - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sku': 'str',
            'name': 'str',
            'description': 'str',
            'price': 'ProductPriceInfo',
            'items': 'list[PreconfiguredItem]',
            'images': 'list[PreconfiguredProductImage]'
        }

        self.attribute_map = {
            'sku': 'Sku',
            'name': 'Name',
            'description': 'Description',
            'price': 'Price',
            'items': 'Items',
            'images': 'Images'
        }

        self._sku = None
        self._name = None
        self._description = None
        self._price = None
        self._items = None
        self._images = None

    @property
    def sku(self):
        """
        Gets the sku of this PreconfiguredProduct.
        A sku that uniquely identifies the preconfigured product.

        :return: The sku of this PreconfiguredProduct.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this PreconfiguredProduct.
        A sku that uniquely identifies the preconfigured product.

        :param sku: The sku of this PreconfiguredProduct.
        :type: str
        """
        self._sku = sku

    @property
    def name(self):
        """
        Gets the name of this PreconfiguredProduct.


        :return: The name of this PreconfiguredProduct.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PreconfiguredProduct.


        :param name: The name of this PreconfiguredProduct.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this PreconfiguredProduct.


        :return: The description of this PreconfiguredProduct.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PreconfiguredProduct.


        :param description: The description of this PreconfiguredProduct.
        :type: str
        """
        self._description = description

    @property
    def price(self):
        """
        Gets the price of this PreconfiguredProduct.


        :return: The price of this PreconfiguredProduct.
        :rtype: ProductPriceInfo
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this PreconfiguredProduct.


        :param price: The price of this PreconfiguredProduct.
        :type: ProductPriceInfo
        """
        self._price = price

    @property
    def items(self):
        """
        Gets the items of this PreconfiguredProduct.
        The item[s] that constitue the product.

        :return: The items of this PreconfiguredProduct.
        :rtype: list[PreconfiguredItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this PreconfiguredProduct.
        The item[s] that constitue the product.

        :param items: The items of this PreconfiguredProduct.
        :type: list[PreconfiguredItem]
        """
        self._items = items

    @property
    def images(self):
        """
        Gets the images of this PreconfiguredProduct.
        Product images. Can contain large and small images for web, mobile, etc

        :return: The images of this PreconfiguredProduct.
        :rtype: list[PreconfiguredProductImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this PreconfiguredProduct.
        Product images. Can contain large and small images for web, mobile, etc

        :param images: The images of this PreconfiguredProduct.
        :type: list[PreconfiguredProductImage]
        """
        self._images = images

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

