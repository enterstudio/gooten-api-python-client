# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PostSubmittedItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PostSubmittedItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'sku': 'str',
            'product_id': 'int',
            'product': 'str',
            'quantity': 'int',
            'status': 'str',
            'tracking_number': 'str',
            'tracking_url': 'str',
            'ship_carrier_name': 'str',
            'price': 'ProductPriceInfo',
            'discount_amount': 'ProductPriceInfo',
            'source_id': 'str',
            'meta': 'Meta',
            'shipments': 'list[Shipment]'
        }

        self.attribute_map = {
            'sku': 'Sku',
            'product_id': 'ProductId',
            'product': 'Product',
            'quantity': 'Quantity',
            'status': 'Status',
            'tracking_number': 'TrackingNumber',
            'tracking_url': 'TrackingUrl',
            'ship_carrier_name': 'ShipCarrierName',
            'price': 'Price',
            'discount_amount': 'DiscountAmount',
            'source_id': 'SourceId',
            'meta': 'Meta',
            'shipments': 'Shipments'
        }

        self._sku = None
        self._product_id = None
        self._product = None
        self._quantity = None
        self._status = None
        self._tracking_number = None
        self._tracking_url = None
        self._ship_carrier_name = None
        self._price = None
        self._discount_amount = None
        self._source_id = None
        self._meta = None
        self._shipments = None

    @property
    def sku(self):
        """
        Gets the sku of this PostSubmittedItem.


        :return: The sku of this PostSubmittedItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this PostSubmittedItem.


        :param sku: The sku of this PostSubmittedItem.
        :type: str
        """
        self._sku = sku

    @property
    def product_id(self):
        """
        Gets the product_id of this PostSubmittedItem.


        :return: The product_id of this PostSubmittedItem.
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this PostSubmittedItem.


        :param product_id: The product_id of this PostSubmittedItem.
        :type: int
        """
        self._product_id = product_id

    @property
    def product(self):
        """
        Gets the product of this PostSubmittedItem.
        The type of product that was bought

        :return: The product of this PostSubmittedItem.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this PostSubmittedItem.
        The type of product that was bought

        :param product: The product of this PostSubmittedItem.
        :type: str
        """
        self._product = product

    @property
    def quantity(self):
        """
        Gets the quantity of this PostSubmittedItem.


        :return: The quantity of this PostSubmittedItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this PostSubmittedItem.


        :param quantity: The quantity of this PostSubmittedItem.
        :type: int
        """
        self._quantity = quantity

    @property
    def status(self):
        """
        Gets the status of this PostSubmittedItem.


        :return: The status of this PostSubmittedItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PostSubmittedItem.


        :param status: The status of this PostSubmittedItem.
        :type: str
        """
        self._status = status

    @property
    def tracking_number(self):
        """
        Gets the tracking_number of this PostSubmittedItem.
        Deprecated. Use the Shipments array as this will be removed in a future release.

        :return: The tracking_number of this PostSubmittedItem.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """
        Sets the tracking_number of this PostSubmittedItem.
        Deprecated. Use the Shipments array as this will be removed in a future release.

        :param tracking_number: The tracking_number of this PostSubmittedItem.
        :type: str
        """
        self._tracking_number = tracking_number

    @property
    def tracking_url(self):
        """
        Gets the tracking_url of this PostSubmittedItem.
        Deprecated. Use the Shipments array as this will be removed in a future release.

        :return: The tracking_url of this PostSubmittedItem.
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """
        Sets the tracking_url of this PostSubmittedItem.
        Deprecated. Use the Shipments array as this will be removed in a future release.

        :param tracking_url: The tracking_url of this PostSubmittedItem.
        :type: str
        """
        self._tracking_url = tracking_url

    @property
    def ship_carrier_name(self):
        """
        Gets the ship_carrier_name of this PostSubmittedItem.
        Deprecated. Use the Shipments array as this will be removed in a future release.

        :return: The ship_carrier_name of this PostSubmittedItem.
        :rtype: str
        """
        return self._ship_carrier_name

    @ship_carrier_name.setter
    def ship_carrier_name(self, ship_carrier_name):
        """
        Sets the ship_carrier_name of this PostSubmittedItem.
        Deprecated. Use the Shipments array as this will be removed in a future release.

        :param ship_carrier_name: The ship_carrier_name of this PostSubmittedItem.
        :type: str
        """
        self._ship_carrier_name = ship_carrier_name

    @property
    def price(self):
        """
        Gets the price of this PostSubmittedItem.


        :return: The price of this PostSubmittedItem.
        :rtype: ProductPriceInfo
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this PostSubmittedItem.


        :param price: The price of this PostSubmittedItem.
        :type: ProductPriceInfo
        """
        self._price = price

    @property
    def discount_amount(self):
        """
        Gets the discount_amount of this PostSubmittedItem.


        :return: The discount_amount of this PostSubmittedItem.
        :rtype: ProductPriceInfo
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """
        Sets the discount_amount of this PostSubmittedItem.


        :param discount_amount: The discount_amount of this PostSubmittedItem.
        :type: ProductPriceInfo
        """
        self._discount_amount = discount_amount

    @property
    def source_id(self):
        """
        Gets the source_id of this PostSubmittedItem.
        Partner's internal ID-- entirely optional

        :return: The source_id of this PostSubmittedItem.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this PostSubmittedItem.
        Partner's internal ID-- entirely optional

        :param source_id: The source_id of this PostSubmittedItem.
        :type: str
        """
        self._source_id = source_id

    @property
    def meta(self):
        """
        Gets the meta of this PostSubmittedItem.
        An optional Map<string,string> of misc properties.

        :return: The meta of this PostSubmittedItem.
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """
        Sets the meta of this PostSubmittedItem.
        An optional Map<string,string> of misc properties.

        :param meta: The meta of this PostSubmittedItem.
        :type: Meta
        """
        self._meta = meta

    @property
    def shipments(self):
        """
        Gets the shipments of this PostSubmittedItem.


        :return: The shipments of this PostSubmittedItem.
        :rtype: list[Shipment]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """
        Sets the shipments of this PostSubmittedItem.


        :param shipments: The shipments of this PostSubmittedItem.
        :type: list[Shipment]
        """
        self._shipments = shipments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

