# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Product(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Product - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'u_id': 'str',
            'name': 'str',
            'short_description': 'str',
            'has_available_product_variants': 'bool',
            'has_product_templates': 'bool',
            'featured_index': 'int',
            'max_zoom': 'int',
            'retail_price': 'ProductPriceInfo',
            'info': 'list[ProductInfo]',
            'product_image': 'list[ProductImage]',
            'price_info': 'ProductPriceInfo',
            'partner_price_info': 'ProductPriceInfo',
            'categories': 'list[Category]'
        }

        self.attribute_map = {
            'id': 'Id',
            'u_id': 'UId',
            'name': 'Name',
            'short_description': 'ShortDescription',
            'has_available_product_variants': 'HasAvailableProductVariants',
            'has_product_templates': 'HasProductTemplates',
            'featured_index': 'FeaturedIndex',
            'max_zoom': 'MaxZoom',
            'retail_price': 'RetailPrice',
            'info': 'Info',
            'product_image': 'ProductImage',
            'price_info': 'PriceInfo',
            'partner_price_info': 'PartnerPriceInfo',
            'categories': 'Categories'
        }

        self._id = None
        self._u_id = None
        self._name = None
        self._short_description = None
        self._has_available_product_variants = None
        self._has_product_templates = None
        self._featured_index = None
        self._max_zoom = None
        self._retail_price = None
        self._info = None
        self._product_image = None
        self._price_info = None
        self._partner_price_info = None
        self._categories = None

    @property
    def id(self):
        """
        Gets the id of this Product.
        The product type id. Represents a type/class of products. Can later be passed into the productvariant service to get available product variations.

        :return: The id of this Product.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Product.
        The product type id. Represents a type/class of products. Can later be passed into the productvariant service to get available product variations.

        :param id: The id of this Product.
        :type: int
        """
        self._id = id

    @property
    def u_id(self):
        """
        Gets the u_id of this Product.
        An id that syncs between printio's staging and live environments.

        :return: The u_id of this Product.
        :rtype: str
        """
        return self._u_id

    @u_id.setter
    def u_id(self, u_id):
        """
        Sets the u_id of this Product.
        An id that syncs between printio's staging and live environments.

        :param u_id: The u_id of this Product.
        :type: str
        """
        self._u_id = u_id

    @property
    def name(self):
        """
        Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Product.


        :param name: The name of this Product.
        :type: str
        """
        self._name = name

    @property
    def short_description(self):
        """
        Gets the short_description of this Product.


        :return: The short_description of this Product.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this Product.


        :param short_description: The short_description of this Product.
        :type: str
        """
        self._short_description = short_description

    @property
    def has_available_product_variants(self):
        """
        Gets the has_available_product_variants of this Product.
        Whether or not the item returned is a Product, or ProductVariant. Items with a Sku will not have other product variants

        :return: The has_available_product_variants of this Product.
        :rtype: bool
        """
        return self._has_available_product_variants

    @has_available_product_variants.setter
    def has_available_product_variants(self, has_available_product_variants):
        """
        Sets the has_available_product_variants of this Product.
        Whether or not the item returned is a Product, or ProductVariant. Items with a Sku will not have other product variants

        :param has_available_product_variants: The has_available_product_variants of this Product.
        :type: bool
        """
        self._has_available_product_variants = has_available_product_variants

    @property
    def has_product_templates(self):
        """
        Gets the has_product_templates of this Product.
        Whether or not the product has variants with templates.

        :return: The has_product_templates of this Product.
        :rtype: bool
        """
        return self._has_product_templates

    @has_product_templates.setter
    def has_product_templates(self, has_product_templates):
        """
        Sets the has_product_templates of this Product.
        Whether or not the product has variants with templates.

        :param has_product_templates: The has_product_templates of this Product.
        :type: bool
        """
        self._has_product_templates = has_product_templates

    @property
    def featured_index(self):
        """
        Gets the featured_index of this Product.
        A value to sort featured items by. Note that this is null if IsFeatured=false

        :return: The featured_index of this Product.
        :rtype: int
        """
        return self._featured_index

    @featured_index.setter
    def featured_index(self, featured_index):
        """
        Sets the featured_index of this Product.
        A value to sort featured items by. Note that this is null if IsFeatured=false

        :param featured_index: The featured_index of this Product.
        :type: int
        """
        self._featured_index = featured_index

    @property
    def max_zoom(self):
        """
        Gets the max_zoom of this Product.


        :return: The max_zoom of this Product.
        :rtype: int
        """
        return self._max_zoom

    @max_zoom.setter
    def max_zoom(self, max_zoom):
        """
        Sets the max_zoom of this Product.


        :param max_zoom: The max_zoom of this Product.
        :type: int
        """
        self._max_zoom = max_zoom

    @property
    def retail_price(self):
        """
        Gets the retail_price of this Product.


        :return: The retail_price of this Product.
        :rtype: ProductPriceInfo
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """
        Sets the retail_price of this Product.


        :param retail_price: The retail_price of this Product.
        :type: ProductPriceInfo
        """
        self._retail_price = retail_price

    @property
    def info(self):
        """
        Gets the info of this Product.
        Content describing the product.

        :return: The info of this Product.
        :rtype: list[ProductInfo]
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this Product.
        Content describing the product.

        :param info: The info of this Product.
        :type: list[ProductInfo]
        """
        self._info = info

    @property
    def product_image(self):
        """
        Gets the product_image of this Product.
        Product images. Note that this contains large and small images for web, mobile, etc

        :return: The product_image of this Product.
        :rtype: list[ProductImage]
        """
        return self._product_image

    @product_image.setter
    def product_image(self, product_image):
        """
        Sets the product_image of this Product.
        Product images. Note that this contains large and small images for web, mobile, etc

        :param product_image: The product_image of this Product.
        :type: list[ProductImage]
        """
        self._product_image = product_image

    @property
    def price_info(self):
        """
        Gets the price_info of this Product.


        :return: The price_info of this Product.
        :rtype: ProductPriceInfo
        """
        return self._price_info

    @price_info.setter
    def price_info(self, price_info):
        """
        Sets the price_info of this Product.


        :param price_info: The price_info of this Product.
        :type: ProductPriceInfo
        """
        self._price_info = price_info

    @property
    def partner_price_info(self):
        """
        Gets the partner_price_info of this Product.


        :return: The partner_price_info of this Product.
        :rtype: ProductPriceInfo
        """
        return self._partner_price_info

    @partner_price_info.setter
    def partner_price_info(self, partner_price_info):
        """
        Sets the partner_price_info of this Product.


        :param partner_price_info: The partner_price_info of this Product.
        :type: ProductPriceInfo
        """
        self._partner_price_info = partner_price_info

    @property
    def categories(self):
        """
        Gets the categories of this Product.


        :return: The categories of this Product.
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this Product.


        :param categories: The categories of this Product.
        :type: list[Category]
        """
        self._categories = categories

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

