# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class PostOrder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PostOrder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ship_to_address': 'ShipToAddress',
            'billing_address': 'ShipToAddress',
            'items': 'list[PostOrderItem]',
            'payment': 'OrderPayment',
            'source_id': 'str',
            'is_pre_submit': 'bool',
            'coupon_code': 'str',
            'meta': 'Meta'
        }

        self.attribute_map = {
            'ship_to_address': 'ShipToAddress',
            'billing_address': 'BillingAddress',
            'items': 'Items',
            'payment': 'Payment',
            'source_id': 'SourceId',
            'is_pre_submit': 'IsPreSubmit',
            'coupon_code': 'CouponCode',
            'meta': 'Meta'
        }


        self._ship_to_address = None

        self._billing_address = None

        self._items = None

        self._payment = None

        self._source_id = None

        self._is_pre_submit = None

        self._coupon_code = None

        self._meta = None



    @property
    def ship_to_address(self):
        """
        Gets the ship_to_address of this PostOrder.


        :return: The ship_to_address of this PostOrder.
        :rtype: ShipToAddress
        """
        return self._ship_to_address

    @ship_to_address.setter
    def ship_to_address(self, ship_to_address):
        """
        Sets the ship_to_address of this PostOrder.


        :param ship_to_address: The ship_to_address of this PostOrder.
        :type: ShipToAddress
        """
        self._ship_to_address = ship_to_address


    @property
    def billing_address(self):
        """
        Gets the billing_address of this PostOrder.


        :return: The billing_address of this PostOrder.
        :rtype: ShipToAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """
        Sets the billing_address of this PostOrder.


        :param billing_address: The billing_address of this PostOrder.
        :type: ShipToAddress
        """
        self._billing_address = billing_address


    @property
    def items(self):
        """
        Gets the items of this PostOrder.


        :return: The items of this PostOrder.
        :rtype: list[PostOrderItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this PostOrder.


        :param items: The items of this PostOrder.
        :type: list[PostOrderItem]
        """
        self._items = items


    @property
    def payment(self):
        """
        Gets the payment of this PostOrder.


        :return: The payment of this PostOrder.
        :rtype: OrderPayment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """
        Sets the payment of this PostOrder.


        :param payment: The payment of this PostOrder.
        :type: OrderPayment
        """
        self._payment = payment


    @property
    def source_id(self):
        """
        Gets the source_id of this PostOrder.
        Clients can submit an ID they use for the order here.

        :return: The source_id of this PostOrder.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this PostOrder.
        Clients can submit an ID they use for the order here.

        :param source_id: The source_id of this PostOrder.
        :type: str
        """
        self._source_id = source_id


    @property
    def is_pre_submit(self):
        """
        Gets the is_pre_submit of this PostOrder.
        Submit the order into PrePayment status.

        :return: The is_pre_submit of this PostOrder.
        :rtype: bool
        """
        return self._is_pre_submit

    @is_pre_submit.setter
    def is_pre_submit(self, is_pre_submit):
        """
        Sets the is_pre_submit of this PostOrder.
        Submit the order into PrePayment status.

        :param is_pre_submit: The is_pre_submit of this PostOrder.
        :type: bool
        """
        self._is_pre_submit = is_pre_submit


    @property
    def coupon_code(self):
        """
        Gets the coupon_code of this PostOrder.


        :return: The coupon_code of this PostOrder.
        :rtype: str
        """
        return self._coupon_code

    @coupon_code.setter
    def coupon_code(self, coupon_code):
        """
        Sets the coupon_code of this PostOrder.


        :param coupon_code: The coupon_code of this PostOrder.
        :type: str
        """
        self._coupon_code = coupon_code


    @property
    def meta(self):
        """
        Gets the meta of this PostOrder.
        An optional Map<string,string> of misc properties.

        :return: The meta of this PostOrder.
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """
        Sets the meta of this PostOrder.
        An optional Map<string,string> of misc properties.

        :param meta: The meta of this PostOrder.
        :type: Meta
        """
        self._meta = meta


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



