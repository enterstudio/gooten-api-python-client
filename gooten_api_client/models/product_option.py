# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ProductOption(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProductOption - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'option_id': 'str',
            'value_id': 'str',
            'name': 'str',
            'value': 'str',
            'image_url': 'str',
            'image_type': 'str',
            'rgba_color': 'str',
            'cm_value': 'str',
            'sort_value': 'str'
        }

        self.attribute_map = {
            'option_id': 'OptionId',
            'value_id': 'ValueId',
            'name': 'Name',
            'value': 'Value',
            'image_url': 'ImageUrl',
            'image_type': 'ImageType',
            'rgba_color': 'RgbaColor',
            'cm_value': 'CmValue',
            'sort_value': 'SortValue'
        }

        self._option_id = None
        self._value_id = None
        self._name = None
        self._value = None
        self._image_url = None
        self._image_type = None
        self._rgba_color = None
        self._cm_value = None
        self._sort_value = None

    @property
    def option_id(self):
        """
        Gets the option_id of this ProductOption.


        :return: The option_id of this ProductOption.
        :rtype: str
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id):
        """
        Sets the option_id of this ProductOption.


        :param option_id: The option_id of this ProductOption.
        :type: str
        """
        self._option_id = option_id

    @property
    def value_id(self):
        """
        Gets the value_id of this ProductOption.


        :return: The value_id of this ProductOption.
        :rtype: str
        """
        return self._value_id

    @value_id.setter
    def value_id(self, value_id):
        """
        Sets the value_id of this ProductOption.


        :param value_id: The value_id of this ProductOption.
        :type: str
        """
        self._value_id = value_id

    @property
    def name(self):
        """
        Gets the name of this ProductOption.


        :return: The name of this ProductOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProductOption.


        :param name: The name of this ProductOption.
        :type: str
        """
        self._name = name

    @property
    def value(self):
        """
        Gets the value of this ProductOption.


        :return: The value of this ProductOption.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this ProductOption.


        :param value: The value of this ProductOption.
        :type: str
        """
        self._value = value

    @property
    def image_url(self):
        """
        Gets the image_url of this ProductOption.


        :return: The image_url of this ProductOption.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this ProductOption.


        :param image_url: The image_url of this ProductOption.
        :type: str
        """
        self._image_url = image_url

    @property
    def image_type(self):
        """
        Gets the image_type of this ProductOption.


        :return: The image_type of this ProductOption.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """
        Sets the image_type of this ProductOption.


        :param image_type: The image_type of this ProductOption.
        :type: str
        """
        self._image_type = image_type

    @property
    def rgba_color(self):
        """
        Gets the rgba_color of this ProductOption.


        :return: The rgba_color of this ProductOption.
        :rtype: str
        """
        return self._rgba_color

    @rgba_color.setter
    def rgba_color(self, rgba_color):
        """
        Sets the rgba_color of this ProductOption.


        :param rgba_color: The rgba_color of this ProductOption.
        :type: str
        """
        self._rgba_color = rgba_color

    @property
    def cm_value(self):
        """
        Gets the cm_value of this ProductOption.


        :return: The cm_value of this ProductOption.
        :rtype: str
        """
        return self._cm_value

    @cm_value.setter
    def cm_value(self, cm_value):
        """
        Sets the cm_value of this ProductOption.


        :param cm_value: The cm_value of this ProductOption.
        :type: str
        """
        self._cm_value = cm_value

    @property
    def sort_value(self):
        """
        Gets the sort_value of this ProductOption.


        :return: The sort_value of this ProductOption.
        :rtype: str
        """
        return self._sort_value

    @sort_value.setter
    def sort_value(self, sort_value):
        """
        Sets the sort_value of this ProductOption.


        :param sort_value: The sort_value of this ProductOption.
        :type: str
        """
        self._sort_value = sort_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

