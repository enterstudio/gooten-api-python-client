# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PostOrderItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PostOrderItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'quantity': 'int',
            'sku': 'str',
            'ship_carrier_method_id': 'int',
            'ship_type': 'str',
            'images': 'list[Image]',
            'source_id': 'str',
            'meta': 'Meta'
        }

        self.attribute_map = {
            'quantity': 'Quantity',
            'sku': 'SKU',
            'ship_carrier_method_id': 'ShipCarrierMethodId',
            'ship_type': 'ShipType',
            'images': 'Images',
            'source_id': 'SourceId',
            'meta': 'Meta'
        }

        self._quantity = None
        self._sku = None
        self._ship_carrier_method_id = None
        self._ship_type = None
        self._images = None
        self._source_id = None
        self._meta = None

    @property
    def quantity(self):
        """
        Gets the quantity of this PostOrderItem.


        :return: The quantity of this PostOrderItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this PostOrderItem.


        :param quantity: The quantity of this PostOrderItem.
        :type: int
        """
        self._quantity = quantity

    @property
    def sku(self):
        """
        Gets the sku of this PostOrderItem.


        :return: The sku of this PostOrderItem.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this PostOrderItem.


        :param sku: The sku of this PostOrderItem.
        :type: str
        """
        self._sku = sku

    @property
    def ship_carrier_method_id(self):
        """
        Gets the ship_carrier_method_id of this PostOrderItem.


        :return: The ship_carrier_method_id of this PostOrderItem.
        :rtype: int
        """
        return self._ship_carrier_method_id

    @ship_carrier_method_id.setter
    def ship_carrier_method_id(self, ship_carrier_method_id):
        """
        Sets the ship_carrier_method_id of this PostOrderItem.


        :param ship_carrier_method_id: The ship_carrier_method_id of this PostOrderItem.
        :type: int
        """
        self._ship_carrier_method_id = ship_carrier_method_id

    @property
    def ship_type(self):
        """
        Gets the ship_type of this PostOrderItem.
        If one does not want to pass a ShipCarrierMethodId of a specific shipping method, one can instead pass 'Standard', 'Overnight', or 'Expedited' here.

        :return: The ship_type of this PostOrderItem.
        :rtype: str
        """
        return self._ship_type

    @ship_type.setter
    def ship_type(self, ship_type):
        """
        Sets the ship_type of this PostOrderItem.
        If one does not want to pass a ShipCarrierMethodId of a specific shipping method, one can instead pass 'Standard', 'Overnight', or 'Expedited' here.

        :param ship_type: The ship_type of this PostOrderItem.
        :type: str
        """
        self._ship_type = ship_type

    @property
    def images(self):
        """
        Gets the images of this PostOrderItem.


        :return: The images of this PostOrderItem.
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this PostOrderItem.


        :param images: The images of this PostOrderItem.
        :type: list[Image]
        """
        self._images = images

    @property
    def source_id(self):
        """
        Gets the source_id of this PostOrderItem.
        An optional place to pass in an ID for the OrderItem.

        :return: The source_id of this PostOrderItem.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this PostOrderItem.
        An optional place to pass in an ID for the OrderItem.

        :param source_id: The source_id of this PostOrderItem.
        :type: str
        """
        self._source_id = source_id

    @property
    def meta(self):
        """
        Gets the meta of this PostOrderItem.
        An optional Map<string,string> of misc properties.

        :return: The meta of this PostOrderItem.
        :rtype: Meta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """
        Sets the meta of this PostOrderItem.
        An optional Map<string,string> of misc properties.

        :param meta: The meta of this PostOrderItem.
        :type: Meta
        """
        self._meta = meta

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

