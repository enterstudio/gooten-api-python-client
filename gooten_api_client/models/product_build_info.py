# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ProductBuildInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProductBuildInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'description': 'str',
            'type': 'str',
            'z_index': 'int',
            'x1': 'int',
            'x2': 'int',
            'y1': 'int',
            'y2': 'int',
            'color': 'str',
            'background_image_url': 'str',
            'overlay_image_url': 'str',
            'font_name': 'str',
            'font_size': 'str',
            'font_h_alignment': 'str',
            'font_v_alighment': 'str',
            'default_text': 'str'
        }

        self.attribute_map = {
            'id': 'Id',
            'description': 'Description',
            'type': 'Type',
            'z_index': 'ZIndex',
            'x1': 'X1',
            'x2': 'X2',
            'y1': 'Y1',
            'y2': 'Y2',
            'color': 'Color',
            'background_image_url': 'BackgroundImageUrl',
            'overlay_image_url': 'OverlayImageUrl',
            'font_name': 'FontName',
            'font_size': 'FontSize',
            'font_h_alignment': 'FontHAlignment',
            'font_v_alighment': 'FontVAlighment',
            'default_text': 'DefaultText'
        }

        self._id = None
        self._description = None
        self._type = None
        self._z_index = None
        self._x1 = None
        self._x2 = None
        self._y1 = None
        self._y2 = None
        self._color = None
        self._background_image_url = None
        self._overlay_image_url = None
        self._font_name = None
        self._font_size = None
        self._font_h_alignment = None
        self._font_v_alighment = None
        self._default_text = None

    @property
    def id(self):
        """
        Gets the id of this ProductBuildInfo.


        :return: The id of this ProductBuildInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProductBuildInfo.


        :param id: The id of this ProductBuildInfo.
        :type: str
        """
        self._id = id

    @property
    def description(self):
        """
        Gets the description of this ProductBuildInfo.


        :return: The description of this ProductBuildInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProductBuildInfo.


        :param description: The description of this ProductBuildInfo.
        :type: str
        """
        self._description = description

    @property
    def type(self):
        """
        Gets the type of this ProductBuildInfo.


        :return: The type of this ProductBuildInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ProductBuildInfo.


        :param type: The type of this ProductBuildInfo.
        :type: str
        """
        self._type = type

    @property
    def z_index(self):
        """
        Gets the z_index of this ProductBuildInfo.


        :return: The z_index of this ProductBuildInfo.
        :rtype: int
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """
        Sets the z_index of this ProductBuildInfo.


        :param z_index: The z_index of this ProductBuildInfo.
        :type: int
        """
        self._z_index = z_index

    @property
    def x1(self):
        """
        Gets the x1 of this ProductBuildInfo.


        :return: The x1 of this ProductBuildInfo.
        :rtype: int
        """
        return self._x1

    @x1.setter
    def x1(self, x1):
        """
        Sets the x1 of this ProductBuildInfo.


        :param x1: The x1 of this ProductBuildInfo.
        :type: int
        """
        self._x1 = x1

    @property
    def x2(self):
        """
        Gets the x2 of this ProductBuildInfo.


        :return: The x2 of this ProductBuildInfo.
        :rtype: int
        """
        return self._x2

    @x2.setter
    def x2(self, x2):
        """
        Sets the x2 of this ProductBuildInfo.


        :param x2: The x2 of this ProductBuildInfo.
        :type: int
        """
        self._x2 = x2

    @property
    def y1(self):
        """
        Gets the y1 of this ProductBuildInfo.


        :return: The y1 of this ProductBuildInfo.
        :rtype: int
        """
        return self._y1

    @y1.setter
    def y1(self, y1):
        """
        Sets the y1 of this ProductBuildInfo.


        :param y1: The y1 of this ProductBuildInfo.
        :type: int
        """
        self._y1 = y1

    @property
    def y2(self):
        """
        Gets the y2 of this ProductBuildInfo.


        :return: The y2 of this ProductBuildInfo.
        :rtype: int
        """
        return self._y2

    @y2.setter
    def y2(self, y2):
        """
        Sets the y2 of this ProductBuildInfo.


        :param y2: The y2 of this ProductBuildInfo.
        :type: int
        """
        self._y2 = y2

    @property
    def color(self):
        """
        Gets the color of this ProductBuildInfo.


        :return: The color of this ProductBuildInfo.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this ProductBuildInfo.


        :param color: The color of this ProductBuildInfo.
        :type: str
        """
        self._color = color

    @property
    def background_image_url(self):
        """
        Gets the background_image_url of this ProductBuildInfo.


        :return: The background_image_url of this ProductBuildInfo.
        :rtype: str
        """
        return self._background_image_url

    @background_image_url.setter
    def background_image_url(self, background_image_url):
        """
        Sets the background_image_url of this ProductBuildInfo.


        :param background_image_url: The background_image_url of this ProductBuildInfo.
        :type: str
        """
        self._background_image_url = background_image_url

    @property
    def overlay_image_url(self):
        """
        Gets the overlay_image_url of this ProductBuildInfo.


        :return: The overlay_image_url of this ProductBuildInfo.
        :rtype: str
        """
        return self._overlay_image_url

    @overlay_image_url.setter
    def overlay_image_url(self, overlay_image_url):
        """
        Sets the overlay_image_url of this ProductBuildInfo.


        :param overlay_image_url: The overlay_image_url of this ProductBuildInfo.
        :type: str
        """
        self._overlay_image_url = overlay_image_url

    @property
    def font_name(self):
        """
        Gets the font_name of this ProductBuildInfo.


        :return: The font_name of this ProductBuildInfo.
        :rtype: str
        """
        return self._font_name

    @font_name.setter
    def font_name(self, font_name):
        """
        Sets the font_name of this ProductBuildInfo.


        :param font_name: The font_name of this ProductBuildInfo.
        :type: str
        """
        self._font_name = font_name

    @property
    def font_size(self):
        """
        Gets the font_size of this ProductBuildInfo.


        :return: The font_size of this ProductBuildInfo.
        :rtype: str
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """
        Sets the font_size of this ProductBuildInfo.


        :param font_size: The font_size of this ProductBuildInfo.
        :type: str
        """
        self._font_size = font_size

    @property
    def font_h_alignment(self):
        """
        Gets the font_h_alignment of this ProductBuildInfo.


        :return: The font_h_alignment of this ProductBuildInfo.
        :rtype: str
        """
        return self._font_h_alignment

    @font_h_alignment.setter
    def font_h_alignment(self, font_h_alignment):
        """
        Sets the font_h_alignment of this ProductBuildInfo.


        :param font_h_alignment: The font_h_alignment of this ProductBuildInfo.
        :type: str
        """
        self._font_h_alignment = font_h_alignment

    @property
    def font_v_alighment(self):
        """
        Gets the font_v_alighment of this ProductBuildInfo.


        :return: The font_v_alighment of this ProductBuildInfo.
        :rtype: str
        """
        return self._font_v_alighment

    @font_v_alighment.setter
    def font_v_alighment(self, font_v_alighment):
        """
        Sets the font_v_alighment of this ProductBuildInfo.


        :param font_v_alighment: The font_v_alighment of this ProductBuildInfo.
        :type: str
        """
        self._font_v_alighment = font_v_alighment

    @property
    def default_text(self):
        """
        Gets the default_text of this ProductBuildInfo.


        :return: The default_text of this ProductBuildInfo.
        :rtype: str
        """
        return self._default_text

    @default_text.setter
    def default_text(self, default_text):
        """
        Sets the default_text of this ProductBuildInfo.


        :param default_text: The default_text of this ProductBuildInfo.
        :type: str
        """
        self._default_text = default_text

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

