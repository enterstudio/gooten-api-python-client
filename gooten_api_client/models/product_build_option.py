# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ProductBuildOption(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProductBuildOption - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'image_url': 'str',
            'is_default': 'bool',
            'category': 'str',
            'is_partner_specific': 'bool',
            'spaces': 'list[ProductBuildInfoSpace]'
        }

        self.attribute_map = {
            'name': 'Name',
            'image_url': 'ImageUrl',
            'is_default': 'IsDefault',
            'category': 'Category',
            'is_partner_specific': 'IsPartnerSpecific',
            'spaces': 'Spaces'
        }

        self._name = None
        self._image_url = None
        self._is_default = None
        self._category = None
        self._is_partner_specific = None
        self._spaces = None

    @property
    def name(self):
        """
        Gets the name of this ProductBuildOption.


        :return: The name of this ProductBuildOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProductBuildOption.


        :param name: The name of this ProductBuildOption.
        :type: str
        """
        self._name = name

    @property
    def image_url(self):
        """
        Gets the image_url of this ProductBuildOption.


        :return: The image_url of this ProductBuildOption.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this ProductBuildOption.


        :param image_url: The image_url of this ProductBuildOption.
        :type: str
        """
        self._image_url = image_url

    @property
    def is_default(self):
        """
        Gets the is_default of this ProductBuildOption.


        :return: The is_default of this ProductBuildOption.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this ProductBuildOption.


        :param is_default: The is_default of this ProductBuildOption.
        :type: bool
        """
        self._is_default = is_default

    @property
    def category(self):
        """
        Gets the category of this ProductBuildOption.


        :return: The category of this ProductBuildOption.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this ProductBuildOption.


        :param category: The category of this ProductBuildOption.
        :type: str
        """
        self._category = category

    @property
    def is_partner_specific(self):
        """
        Gets the is_partner_specific of this ProductBuildOption.


        :return: The is_partner_specific of this ProductBuildOption.
        :rtype: bool
        """
        return self._is_partner_specific

    @is_partner_specific.setter
    def is_partner_specific(self, is_partner_specific):
        """
        Sets the is_partner_specific of this ProductBuildOption.


        :param is_partner_specific: The is_partner_specific of this ProductBuildOption.
        :type: bool
        """
        self._is_partner_specific = is_partner_specific

    @property
    def spaces(self):
        """
        Gets the spaces of this ProductBuildOption.


        :return: The spaces of this ProductBuildOption.
        :rtype: list[ProductBuildInfoSpace]
        """
        return self._spaces

    @spaces.setter
    def spaces(self, spaces):
        """
        Sets the spaces of this ProductBuildOption.


        :param spaces: The spaces of this ProductBuildOption.
        :type: list[ProductBuildInfoSpace]
        """
        self._spaces = spaces

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

